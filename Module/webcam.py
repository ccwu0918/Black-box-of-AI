# -*- coding: utf-8 -*-
"""「colab_webcam.ipynb」的副本

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K19peBybPMAUUbvrpdFUJOQjqfShSey-
"""

# import dependencies
from IPython.display import display, Javascript, Image
from google.colab.output import eval_js
from base64 import b64decode, b64encode
import cv2
import numpy as np
import PIL
import io
import html
import time
from PIL import Image
# 轉換JavaScript物件(js_reply)為OpenCV BGR image
def js_to_image(js_reply):
  image_bytes = b64decode(js_reply.split(',')[1])  #將base64的image編碼資料做解碼為bytes
  jpg_as_np = np.frombuffer(image_bytes, dtype=np.uint8)  #交bytes轉換為numpy array
  img = cv2.imdecode(jpg_as_np, flags=1)  #將numpy array轉換為OpenCV BGR image
  img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  img_pil = Image.fromarray(img_rgb)
  return img_pil

# 轉換OpenCV 框框邊界image(Numpy array pixels)為 base64 byte 字串重疊到影像串流 
def bbox_to_bytes(bbox_array):
  bbox_PIL = PIL.Image.fromarray(bbox_array, 'RGBA')  #轉換array為PIL image
  iobuf = io.BytesIO()
  bbox_PIL.save(iobuf, format='png')  #轉換bbox為png
  bbox_bytes = 'data:image/png;base64,{}'.format((str(b64encode(iobuf.getvalue()), 'utf-8')))  #轉換為字串
  return bbox_bytes

# JavaScript 產生WebCam的即時影像串流
def video_stream():
  js = Javascript('''
    var video;
    var div = null;
    var stream;
    var captureCanvas;
    var imgElement;
    var labelElement;
    var pendingResolve = null;
    var shutdown = false;
    function removeDom() {
       stream.getVideoTracks()[0].stop();
       video.remove();
       div.remove();
       video = null;
       div = null;
       stream = null;
       imgElement = null;
       captureCanvas = null;
       labelElement = null;
    }
    
    function onAnimationFrame() {
      if (!shutdown) { window.requestAnimationFrame(onAnimationFrame);}
      if (pendingResolve) {
        var result = "";
        if (!shutdown) {
          captureCanvas.getContext('2d').drawImage(video, 0, 0, 640, 480);
          result = captureCanvas.toDataURL('image/jpeg', 0.8)
        }
        var lp = pendingResolve;
        pendingResolve = null;
        lp(result);
      }
    }
    
    async function createDom() {
      if (div !== null) { return stream; }
      div = document.createElement('div');
      div.style.border = '2px solid black';
      div.style.padding = '3px';
      div.style.width = '100%';
      div.style.maxWidth = '600px';
      document.body.appendChild(div);
      
      const modelOut = document.createElement('div');
      modelOut.innerHTML = "<span>串流狀態:</span>";
      labelElement = document.createElement('span');
      labelElement.innerText = '沒有影像資料流';
      labelElement.style.fontWeight = 'bold';
      modelOut.appendChild(labelElement);
      div.appendChild(modelOut);
           
      video = document.createElement('video');
      video.style.display = 'block';
      video.width = div.clientWidth - 6;
      video.setAttribute('playsinline', '');
      video.onclick = () => { shutdown = true; };
      stream = await navigator.mediaDevices.getUserMedia({video: { facingMode: "environment"}});
      div.appendChild(video);

      imgElement = document.createElement('img');
      imgElement.style.position = 'absolute';
      imgElement.style.zIndex = 1;
      imgElement.onclick = () => { shutdown = true; };
      div.appendChild(imgElement);
      
      const instruction = document.createElement('div');
      instruction.innerHTML = "<span style='color: red; font-weight: bold;'>結束展示請按一下影片區";
      div.appendChild(instruction);
      instruction.onclick = () => { shutdown = true; };
      
      video.srcObject = stream;
      await video.play();

      captureCanvas = document.createElement('canvas');
      captureCanvas.width = 640; //video.videoWidth;
      captureCanvas.height = 480; //video.videoHeight;
      window.requestAnimationFrame(onAnimationFrame);
      return stream;
    }
    async function stream_frame(label) {
      imgData="";
      if (shutdown) { removeDom();  shutdown = false; return '';}
      var preCreate = Date.now();
      stream = await createDom();
      var preShow = Date.now();
      if (label != "") { labelElement.innerHTML = label;}
      if (imgData != "") {
        var videoRect = video.getClientRects()[0];
        imgElement.style.top = videoRect.top + "px";
        imgElement.style.left = videoRect.left + "px";
        imgElement.style.width = videoRect.width + "px";
        imgElement.style.height = videoRect.height + "px";
        imgElement.src = imgData;
      }
      
      var preCapture = Date.now();
      var result = await new Promise(function(resolve, reject) { pendingResolve = resolve; });
      shutdown = false;
      return {'create': preShow - preCreate, 'show': preCapture - preShow, 'capture': Date.now() - preCapture,'img': result};
    }
    ''')

  display(js)
  
def video_frame(label):
  js_reply= eval_js('stream_frame("{}")'.format(label))
  if not js_reply:
    return
  else:
    img=js_to_image(js_reply["img"])
    return img
bbox = ""           # 初始化物件框為空白
label_html=""